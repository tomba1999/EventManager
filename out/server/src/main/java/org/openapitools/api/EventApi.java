/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.7.0-SNAPSHOT).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.Event;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-06-12T13:57:43.210224513Z[Etc/UTC]", comments = "Generator version: 7.7.0-SNAPSHOT")
@Validated
@Tag(name = "events", description = "Operations related to events")
public interface EventApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /event : Add event
     *
     * @param event Event object that needs to be added (required)
     * @return Event added (status code 204)
     */
    @Operation(
        operationId = "addEvent",
        summary = "Add event",
        tags = { "events" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Event added")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/event",
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Void> addEvent(
        @Parameter(name = "Event", description = "Event object that needs to be added", required = true) @Valid @RequestBody Event event
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /event/{eventId} : Delete an event
     *
     * @param eventId  (required)
     * @return Event deleted (status code 204)
     */
    @Operation(
        operationId = "deleteEvent",
        summary = "Delete an event",
        tags = { "events" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Event deleted")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/event/{eventId}"
    )
    
    default ResponseEntity<Void> deleteEvent(
        @Parameter(name = "eventId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("eventId") Integer eventId
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /event/{eventId} : Get a specific event
     *
     * @param eventId  (required)
     * @return A specific event (status code 200)
     */
    @Operation(
        operationId = "getSpecificEvent",
        summary = "Get a specific event",
        tags = { "events" },
        responses = {
            @ApiResponse(responseCode = "200", description = "A specific event", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Event.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/event/{eventId}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Event> getSpecificEvent(
        @Parameter(name = "eventId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("eventId") Integer eventId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"eventId\" : 0, \"eventDuration\" : 1, \"eventImage\" : \"eventImage\", \"eventExactLocation\" : \"eventExactLocation\", \"eventLocation\" : \"eventLocation\", \"eventDescription\" : \"eventDescription\", \"eventPrice\" : 6, \"eventName\" : \"eventName\", \"eventDate\" : \"2000-01-23\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /event/{eventId} : Update an event
     *
     * @param eventId  (required)
     * @param event Event object that needs to be updated (required)
     * @return Event updated (status code 204)
     */
    @Operation(
        operationId = "updateEvent",
        summary = "Update an event",
        tags = { "events" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Event updated")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/event/{eventId}",
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Void> updateEvent(
        @Parameter(name = "eventId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("eventId") Integer eventId,
        @Parameter(name = "Event", description = "Event object that needs to be updated", required = true) @Valid @RequestBody Event event
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
